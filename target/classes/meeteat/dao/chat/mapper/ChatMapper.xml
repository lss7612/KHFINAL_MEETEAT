<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="meeteat.dao.chat.face.ChatDao">
	<!-- 기존에 1대1 대화방이 있는지 검색  -->
	<select id="findChatRoom" parameterType="int" resultType="hashmap">
		select chatting_no, count(*) cnt from(
		    select * from (
		        select c.chatting_no, c.user_total, cu.user_no from tb_chatting2 c
		        inner join tb_chattinguser2 cu
		            on c.chatting_no = cu.chatting_no
		        where c.user_total =2
		    )
		    where user_no = #{user0}
		        or user_no = #{user1}
		    )
		group by chatting_no
	</select>
	
	<!-- chatting_id를 통해 chatting_no구하기 -->
	<select id="getChattingId" parameterType="int" resultType="String">
		select chatting_id from tb_chatting2
		where chatting_no = #{chatting_no}
	</select>
	
	<!-- 채팅방 생성을 위해 chatting_id 추가하기 -->
	<insert id="insertChatById" parameterType="String">
		insert into tb_chatting2(chatting_id) values( #{chatting_id})
	</insert>
	
	<!-- chatting_id를 이용해 chatting_no구하기 -->
	<select id="getChatNumById" parameterType="String" resultType="int">
		select chatting_no from tb_chatting2
		where chatting_id = #{chatting_id}
	</select>
	
	<!-- chatting_no에 참여할 회원 추가하기 -->
	<insert id="insertUserToChatNum" parameterType="int">
		insert into tb_chattinguser2(chatting_no, user_no) values(#{chatting_no}, #{user_no})
	</insert>
	
	<!-- chatting_id로 회원 방 정보 조회 -->
	<select id="getChatRoomInfoById" parameterType="String" resultType="hashmap">
		select * from tb_chatting2
		where chatting_id = #{chatting_id}
	</select>
	
	<!-- chatting_no로 해당 채팅에 속해있는 회원 정보 조회 -->
	<select id="getChatUserListByChatNum" parameterType="int" resultType="hashmap">
		select cu.user_no, u.user_nick from tb_chattinguser2 cu
		inner join tb_user2 u
		    on cu.user_no = u.user_no
		where cu.chatting_no = #{chatting_no}
	</select>
	
	<!-- usre_no가 속한 채팅방 조회 -->
	<select id="getUserJoinChatList" parameterType="int" resultType="hashmap">
		select b.*, u.user_nick from tb_user2 u
		inner join (select c.chatting_no, c.chatting_name, max(cu.user_no)user_no from tb_chatting2 c
		    inner join tb_chattinguser2 cu
		        on c.chatting_no = cu.chatting_no
		    where c.chatting_no in (    
		        select chatting_no from tb_chattinguser2
		        where user_no = 1
		    )
		    group by c.chatting_no, c.chatting_name
		    order by c.chatting_no
		    )b
		on u.user_no = b.user_no    
	</select>
	
	<!-- chatting_no의 최신 메시지 정보를 조회 -->
	<select id="getChatNewestContentAtRoom" parameterType="int" resultType="hashmap">
		select rownum, t.* from (
		    select c.chatting_no, c.chatting_name, c.chatting_id, cc.user_no, u.user_id, u.user_nick, cc.msg_content, cc.msg_date from tb_chattingcontent2 cc
		    inner join tb_user2 u
		        on cc.user_no = u.user_no
		    inner join tb_chatting2 c
		        on cc.chatting_no = c.chatting_no
		    where c.chatting_no= #{chatting_no}
		    order by msg_date desc
			)t
		where rownum =1
	</select>
	
	<insert id="inserMsgContent" parameterType="hashmap">
		insert into tb_chattingcontent2 (chatting_no, user_no, msg_content, msg_date)
		values (#{chatting_no}, #{user_no}, #{msg_content}, sysdate)
	</insert>
	
	<select id="getUserNickByUserNo" parameterType="int" resultType="String">
		select user_nick from tb_user2
		where user_no = #{user_no}
	</select>
	
	<select id="getOldChatByRoomNo" resultType="hashmap">
		select cc.user_no, u.user_nick, cc.msg_content, cc.msg_date from tb_chattingcontent2 cc
		inner join tb_user2 u
		    on cc.user_no = u.user_no
		where chatting_no = #{chatting_no}    
		order by cc.msg_date asc
	</select>
</mapper>